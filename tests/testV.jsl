// The Jikken Shading Language Transpiler
//
// Copyright (c) 2017 Jeffrey Hutchinson
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

in InData
{
	attribute(location=POSITION) vec3 position;
	attribute(location=TEXCOORD0) vec2 texCoord;
};

out Conn
{
	attribute(location=JIKKEN_POSITION) vec4 position;
	attribute(location=TEXCOORD0) vec2 texCoord;
};

UniformBuffer Camera
{
	mat4 view;
	mat4 proj;
};

UniformBuffer Model
{
	mat4 model;
};

Conn main(InData data)
{
	Conn output;

	vec4 mvp = mul(mul(proj, view), model);
	output.position = mul(mvp, data.position);
	output.texCoord = data.texCoord;

	return output;
}
